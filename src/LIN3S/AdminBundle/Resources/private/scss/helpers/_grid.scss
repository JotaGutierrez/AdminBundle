// This file is part of the Admin Bundle.
//
// Copyright (c) 2015-2016 LIN3S <info@lin3s.com>
//
// For the full copyright and license information, please view the LICENSE
// file that was distributed with this source code.
//
// @author Gorka Laucirica <gorka.lauzirika@gmail.com>

@import '../variables/grid';

@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range, 1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

@function media-query-by-range($range, $type: 'up') {
  @if ($type == 'up' & & lower-bound($range) != 0) {
    @return '#{$screen} and (min-width:#{lower-bound($range)}px)';
  } @else if ($type == 'only') {
    @return '#{$screen} and (min-width:#{lower-bound($range)}px) and (max-width:#{upper-bound($range)}px)';
  } @else {
    @warn 'Type #{$type} not supported';
  }
}

$small-only: media-query-by-range($small-range, 'only');

$medium-up: media-query-by-range($medium-range);
$medium-only: media-query-by-range($medium-range, 'only');

$large-up: media-query-by-range($large-range);
$large-only: media-query-by-range($large-range, 'only');

$xlarge-up: media-query-by-range($xlarge-range);
$xlarge-only: media-query-by-range($xlarge-range, 'only');

$xxlarge-up: media-query-by-range($xxlarge-range);
$xxlarge-only: media-query-by-range($xxlarge-range, 'only');

%grid__row {
  display: flex;
  flex-wrap: wrap;
  margin-left: auto;
  margin-right: auto;
}

%grid__row--fluid {
  @extend %grid__row;
  max-width: $fluid-row-width + $column-gutter;
}

%grid__row--fluid-one-column {
  @extend %grid__row--fluid;
  padding-left: $column-gutter;
  padding-right: $column-gutter;
}

@mixin grid__row($selector, $grid-type: 'fluid') {
  @if ($grid-type == 'fluid') {
    #{$selector} {
      @extend %grid__row;
      @extend %grid__row--fluid;
    }
  } @else {
    @if (map-has-key($grid, $grid-type)) {
      #{$selector} {
        @extend %grid__row;
      }
      @each $option in map_get($grid, $grid-type) {
        @media #{media-query-by-range(nth($option,1))} {
          #{$selector} {
            max-width: nth($option, 2) + $column-gutter;
          }
        }
      ;
      }
    } @else {
      @warn '#{$grid-type} not found in $grid map, check _grid-settings.scss';
    }
  }
}

@mixin grid__column($columns) {
  flex: 1 1 #{100% / $column-count * $columns};
  max-width: #{100% / $column-count * $columns};
  padding-left: #{$column-gutter / 2};
  padding-right: #{$column-gutter / 2};
  width: 100%;
}

@mixin grid__column--push($columns, $column-count: 12) {
  margin-left: calc(#{100% / $column-count * $columns});
}

@mixin grid__columns() {
  .row__column {
    @include grid__column($column-count);
  }

  @each $col in $small-cols {
    .row__column--small-#{$col} {
      flex: 1 1 #{100% / $column-count * $col};
      max-width: #{100% / $column-count * $col};
    }
  }

  @media #{$medium-up} {
    @each $col in $medium-cols {
      .row__column--medium-#{$col} {
        flex: 1 1 #{100% / $column-count * $col};
        max-width: #{100% / $column-count * $col};
      }
    }
  }

  @media #{$large-up} {
    @each $col in $large-cols {
      .row__column--large-#{$col} {
        flex: 1 1 #{100% / $column-count * $col};
        max-width: #{100% / $column-count * $col};
      }
    }
  }

  @media #{$xlarge-up} {
    @each $col in $xlarge-cols {
      .row__column--large-#{$col} {
        flex: 1 1 #{100% / $column-count * $col};
        max-width: #{100% / $column-count * $col};
      }
    }
  }
}
